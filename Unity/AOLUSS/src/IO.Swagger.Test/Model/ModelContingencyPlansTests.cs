//*****************************************************************************
//* Project: Firefly (Microsoft Hackaton 2020)
//* Description: AOLUSS REST Client
//* Author: Mark West (mark.west@microsoft.com)
//*****************************************************************************

/* 
 * NASA AOLUSS Operator interface
 *
 * this OAS document describes the operator interface for the AOLUSS.
 *
 * OpenAPI spec version: 2.1.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using AolussClientLib.Api;
using AolussClientLib.Model;
using AolussClientLib.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace AolussClientLib.Test
{
    /// <summary>
    ///  Class for testing ModelContingencyPlans
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class ModelContingencyPlansTests
    {
        // TODO uncomment below to declare an instance variable for ModelContingencyPlans
        //private ModelContingencyPlans instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of ModelContingencyPlans
            //instance = new ModelContingencyPlans();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ModelContingencyPlans
        /// </summary>
        [Test]
        public void ModelContingencyPlansInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" ModelContingencyPlans
            //Assert.IsInstanceOfType<ModelContingencyPlans> (instance, "variable 'instance' is a ModelContingencyPlans");
        }


        /// <summary>
        /// Test the property 'ContingencyId'
        /// </summary>
        [Test]
        public void ContingencyIdTest()
        {
            // TODO unit test for the property 'ContingencyId'
        }
        /// <summary>
        /// Test the property 'ContingencyCause'
        /// </summary>
        [Test]
        public void ContingencyCauseTest()
        {
            // TODO unit test for the property 'ContingencyCause'
        }
        /// <summary>
        /// Test the property 'ContingencyResponse'
        /// </summary>
        [Test]
        public void ContingencyResponseTest()
        {
            // TODO unit test for the property 'ContingencyResponse'
        }
        /// <summary>
        /// Test the property 'ContingencyPolygon'
        /// </summary>
        [Test]
        public void ContingencyPolygonTest()
        {
            // TODO unit test for the property 'ContingencyPolygon'
        }
        /// <summary>
        /// Test the property 'LoiterAltitude'
        /// </summary>
        [Test]
        public void LoiterAltitudeTest()
        {
            // TODO unit test for the property 'LoiterAltitude'
        }
        /// <summary>
        /// Test the property 'RelativePreference'
        /// </summary>
        [Test]
        public void RelativePreferenceTest()
        {
            // TODO unit test for the property 'RelativePreference'
        }
        /// <summary>
        /// Test the property 'ContingencyLocationDescription'
        /// </summary>
        [Test]
        public void ContingencyLocationDescriptionTest()
        {
            // TODO unit test for the property 'ContingencyLocationDescription'
        }
        /// <summary>
        /// Test the property 'RelevantOperationVolumes'
        /// </summary>
        [Test]
        public void RelevantOperationVolumesTest()
        {
            // TODO unit test for the property 'RelevantOperationVolumes'
        }
        /// <summary>
        /// Test the property 'ValidTimeBegin'
        /// </summary>
        [Test]
        public void ValidTimeBeginTest()
        {
            // TODO unit test for the property 'ValidTimeBegin'
        }
        /// <summary>
        /// Test the property 'ValidTimeEnd'
        /// </summary>
        [Test]
        public void ValidTimeEndTest()
        {
            // TODO unit test for the property 'ValidTimeEnd'
        }
        /// <summary>
        /// Test the property 'FreeText'
        /// </summary>
        [Test]
        public void FreeTextTest()
        {
            // TODO unit test for the property 'FreeText'
        }

    }

}
