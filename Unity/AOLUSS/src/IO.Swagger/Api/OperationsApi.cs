//*****************************************************************************
//* Project: Firefly (Microsoft Hackaton 2020)
//* Description: AOLUSS REST Client
//* Author: Mark West (mark.west@microsoft.com)
//*****************************************************************************

/* 
 * NASA AOLUSS Operator interface
 *
 * this OAS document describes the operator interface for the AOLUSS.
 *
 * OpenAPI spec version: 2.1.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AolussClientLib.Client;
using AolussClientLib.Model;

namespace AolussClientLib.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IOperationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete all operation data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>ResponseOk</returns>
        ResponseOk DeleteOperatorOperation (Guid? gufi);

        /// <summary>
        /// Delete all operation data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>ApiResponse of ResponseOk</returns>
        ApiResponse<ResponseOk> DeleteOperatorOperationWithHttpInfo (Guid? gufi);
        /// <summary>
        /// Get an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns></returns>
        void GetOperatorOperation (Guid? gufi);

        /// <summary>
        /// Get an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOperatorOperationWithHttpInfo (Guid? gufi);
        /// <summary>
        /// Post a message for an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void PostOperatorMessage (ModelOperatorMessage body);

        /// <summary>
        /// Post a message for an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostOperatorMessageWithHttpInfo (ModelOperatorMessage body);
        /// <summary>
        /// Post a position for an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void PostOperatorPosition (ModelOperatorPosition body);

        /// <summary>
        /// Post a position for an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostOperatorPositionWithHttpInfo (ModelOperatorPosition body);
        /// <summary>
        /// Post an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void PutOperatorOperation (ModelOperatorOperation body);

        /// <summary>
        /// Post an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutOperatorOperationWithHttpInfo (ModelOperatorOperation body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete all operation data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>Task of ResponseOk</returns>
        System.Threading.Tasks.Task<ResponseOk> DeleteOperatorOperationAsync (Guid? gufi);

        /// <summary>
        /// Delete all operation data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>Task of ApiResponse (ResponseOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseOk>> DeleteOperatorOperationAsyncWithHttpInfo (Guid? gufi);
        /// <summary>
        /// Get an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOperatorOperationAsync (Guid? gufi);

        /// <summary>
        /// Get an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOperatorOperationAsyncWithHttpInfo (Guid? gufi);
        /// <summary>
        /// Post a message for an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostOperatorMessageAsync (ModelOperatorMessage body);

        /// <summary>
        /// Post a message for an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostOperatorMessageAsyncWithHttpInfo (ModelOperatorMessage body);
        /// <summary>
        /// Post a position for an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostOperatorPositionAsync (ModelOperatorPosition body);

        /// <summary>
        /// Post a position for an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostOperatorPositionAsyncWithHttpInfo (ModelOperatorPosition body);
        /// <summary>
        /// Post an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutOperatorOperationAsync (ModelOperatorOperation body);

        /// <summary>
        /// Post an operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutOperatorOperationAsyncWithHttpInfo (ModelOperatorOperation body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class OperationsApi : IOperationsApi
    {
        private AolussClientLib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OperationsApi(String basePath)
        {
            this.Configuration = new AolussClientLib.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AolussClientLib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OperationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public OperationsApi()
        {
            this.Configuration = AolussClientLib.Client.Configuration.Default;

            ExceptionFactory = AolussClientLib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OperationsApi(AolussClientLib.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AolussClientLib.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AolussClientLib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AolussClientLib.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AolussClientLib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete all operation data 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>ResponseOk</returns>
        public ResponseOk DeleteOperatorOperation (Guid? gufi)
        {
             ApiResponse<ResponseOk> localVarResponse = DeleteOperatorOperationWithHttpInfo(gufi);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all operation data 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>ApiResponse of ResponseOk</returns>
        public ApiResponse< ResponseOk > DeleteOperatorOperationWithHttpInfo (Guid? gufi)
        {
            // verify the required parameter 'gufi' is set
            if (gufi == null)
                throw new ApiException(400, "Missing required parameter 'gufi' when calling OperationsApi->DeleteOperatorOperation");

            var localVarPath = "/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gufi != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gufi", gufi)); // query parameter
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOperatorOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseOk)));
        }

        /// <summary>
        /// Delete all operation data 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>Task of ResponseOk</returns>
        public async System.Threading.Tasks.Task<ResponseOk> DeleteOperatorOperationAsync (Guid? gufi)
        {
             ApiResponse<ResponseOk> localVarResponse = await DeleteOperatorOperationAsyncWithHttpInfo(gufi);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all operation data 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>Task of ApiResponse (ResponseOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseOk>> DeleteOperatorOperationAsyncWithHttpInfo (Guid? gufi)
        {
            // verify the required parameter 'gufi' is set
            if (gufi == null)
                throw new ApiException(400, "Missing required parameter 'gufi' when calling OperationsApi->DeleteOperatorOperation");

            var localVarPath = "/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gufi != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gufi", gufi)); // query parameter
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOperatorOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseOk)));
        }

        /// <summary>
        /// Get an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns></returns>
        public void GetOperatorOperation (Guid? gufi)
        {
             GetOperatorOperationWithHttpInfo(gufi);
        }

        /// <summary>
        /// Get an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetOperatorOperationWithHttpInfo (Guid? gufi)
        {
            // verify the required parameter 'gufi' is set
            if (gufi == null)
                throw new ApiException(400, "Missing required parameter 'gufi' when calling OperationsApi->GetOperatorOperation");

            var localVarPath = "/operation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gufi != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gufi", gufi)); // query parameter
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOperatorOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOperatorOperationAsync (Guid? gufi)
        {
             await GetOperatorOperationAsyncWithHttpInfo(gufi);

        }

        /// <summary>
        /// Get an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gufi">The GUFI of the operation</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOperatorOperationAsyncWithHttpInfo (Guid? gufi)
        {
            // verify the required parameter 'gufi' is set
            if (gufi == null)
                throw new ApiException(400, "Missing required parameter 'gufi' when calling OperationsApi->GetOperatorOperation");

            var localVarPath = "/operation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gufi != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gufi", gufi)); // query parameter
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOperatorOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Post a message for an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void PostOperatorMessage (ModelOperatorMessage body)
        {
             PostOperatorMessageWithHttpInfo(body);
        }

        /// <summary>
        /// Post a message for an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostOperatorMessageWithHttpInfo (ModelOperatorMessage body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OperationsApi->PostOperatorMessage");

            var localVarPath = "/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOperatorMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Post a message for an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostOperatorMessageAsync (ModelOperatorMessage body)
        {
             await PostOperatorMessageAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Post a message for an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostOperatorMessageAsyncWithHttpInfo (ModelOperatorMessage body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OperationsApi->PostOperatorMessage");

            var localVarPath = "/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOperatorMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Post a position for an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void PostOperatorPosition (ModelOperatorPosition body)
        {
             PostOperatorPositionWithHttpInfo(body);
        }

        /// <summary>
        /// Post a position for an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostOperatorPositionWithHttpInfo (ModelOperatorPosition body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OperationsApi->PostOperatorPosition");

            var localVarPath = "/position";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOperatorPosition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Post a position for an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostOperatorPositionAsync (ModelOperatorPosition body)
        {
             await PostOperatorPositionAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Post a position for an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostOperatorPositionAsyncWithHttpInfo (ModelOperatorPosition body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OperationsApi->PostOperatorPosition");

            var localVarPath = "/position";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOperatorPosition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Post an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void PutOperatorOperation (ModelOperatorOperation body)
        {
             PutOperatorOperationWithHttpInfo(body);
        }

        /// <summary>
        /// Post an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutOperatorOperationWithHttpInfo (ModelOperatorOperation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OperationsApi->PutOperatorOperation");

            var localVarPath = "/operation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOperatorOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Post an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutOperatorOperationAsync (ModelOperatorOperation body)
        {
             await PutOperatorOperationAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Post an operation 
        /// </summary>
        /// <exception cref="AolussClientLib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutOperatorOperationAsyncWithHttpInfo (ModelOperatorOperation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OperationsApi->PutOperatorOperation");

            var localVarPath = "/operation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOperatorOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
