//*****************************************************************************
//* Project: Firefly (Microsoft Hackaton 2020)
//* Description: AOLUSS REST Client
//* Author: Mark West (mark.west@microsoft.com)
//*****************************************************************************

/* 
 * NASA AOLUSS Operator interface
 *
 * this OAS document describes the operator interface for the AOLUSS.
 *
 * OpenAPI spec version: 2.1.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AolussClientLib.Client.SwaggerDateConverter;

namespace AolussClientLib.Model
{
    /// <summary>
    /// ModelAltitudeFixm
    /// </summary>
    [DataContract]
        public partial class ModelAltitudeFixm :  IEquatable<ModelAltitudeFixm>, IValidatableObject
    {
        /// <summary>
        /// Defines VerticalReference
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum VerticalReferenceEnum
        {
            /// <summary>
            /// Enum W84 for value: W84
            /// </summary>
            [EnumMember(Value = "W84")]
            W84 = 1        }
        /// <summary>
        /// Gets or Sets VerticalReference
        /// </summary>
        [DataMember(Name="vertical_reference", EmitDefaultValue=false)]
        public VerticalReferenceEnum VerticalReference { get; set; }
        /// <summary>
        /// Defines UnitsOfMeasure
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UnitsOfMeasureEnum
        {
            /// <summary>
            /// Enum FT for value: FT
            /// </summary>
            [EnumMember(Value = "FT")]
            FT = 1        }
        /// <summary>
        /// Gets or Sets UnitsOfMeasure
        /// </summary>
        [DataMember(Name="units_of_measure", EmitDefaultValue=false)]
        public UnitsOfMeasureEnum UnitsOfMeasure { get; set; }
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SourceEnum
        {
            /// <summary>
            /// Enum ONBOARDSENSOR for value: ONBOARD_SENSOR
            /// </summary>
            [EnumMember(Value = "ONBOARD_SENSOR")]
            ONBOARDSENSOR = 1,
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 2        }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelAltitudeFixm" /> class.
        /// </summary>
        /// <param name="altitudeValue">altitudeValue (required).</param>
        /// <param name="verticalReference">verticalReference (required).</param>
        /// <param name="unitsOfMeasure">unitsOfMeasure (required).</param>
        /// <param name="source">source.</param>
        public ModelAltitudeFixm(decimal? altitudeValue = default(decimal?), VerticalReferenceEnum verticalReference = default(VerticalReferenceEnum), UnitsOfMeasureEnum unitsOfMeasure = default(UnitsOfMeasureEnum), SourceEnum? source = default(SourceEnum?))
        {
            // to ensure "altitudeValue" is required (not null)
            if (altitudeValue == null)
            {
                throw new InvalidDataException("altitudeValue is a required property for ModelAltitudeFixm and cannot be null");
            }
            else
            {
                this.AltitudeValue = altitudeValue;
            }
            // to ensure "verticalReference" is required (not null)
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            if (verticalReference == null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            {
                throw new InvalidDataException("verticalReference is a required property for ModelAltitudeFixm and cannot be null");
            }
            else
            {
                this.VerticalReference = verticalReference;
            }
            // to ensure "unitsOfMeasure" is required (not null)
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            if (unitsOfMeasure == null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            {
                throw new InvalidDataException("unitsOfMeasure is a required property for ModelAltitudeFixm and cannot be null");
            }
            else
            {
                this.UnitsOfMeasure = unitsOfMeasure;
            }
            this.Source = source;
        }
        
        /// <summary>
        /// Gets or Sets AltitudeValue
        /// </summary>
        [DataMember(Name="altitude_value", EmitDefaultValue=false)]
        public decimal? AltitudeValue { get; set; }




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelAltitudeFixm {\n");
            sb.Append("  AltitudeValue: ").Append(AltitudeValue).Append("\n");
            sb.Append("  VerticalReference: ").Append(VerticalReference).Append("\n");
            sb.Append("  UnitsOfMeasure: ").Append(UnitsOfMeasure).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelAltitudeFixm);
        }

        /// <summary>
        /// Returns true if ModelAltitudeFixm instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelAltitudeFixm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelAltitudeFixm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AltitudeValue == input.AltitudeValue ||
                    (this.AltitudeValue != null &&
                    this.AltitudeValue.Equals(input.AltitudeValue))
                ) && 
                (
                    this.VerticalReference == input.VerticalReference ||
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    (this.VerticalReference != null &&
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    this.VerticalReference.Equals(input.VerticalReference))
                ) && 
                (
                    this.UnitsOfMeasure == input.UnitsOfMeasure ||
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    (this.UnitsOfMeasure != null &&
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    this.UnitsOfMeasure.Equals(input.UnitsOfMeasure))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AltitudeValue != null)
                    hashCode = hashCode * 59 + this.AltitudeValue.GetHashCode();
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                if (this.VerticalReference != null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    hashCode = hashCode * 59 + this.VerticalReference.GetHashCode();
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                if (this.UnitsOfMeasure != null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    hashCode = hashCode * 59 + this.UnitsOfMeasure.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
