//*****************************************************************************
//* Project: Firefly (Microsoft Hackaton 2020)
//* Description: AOLUSS REST Client
//* Author: Mark West (mark.west@microsoft.com)
//*****************************************************************************

/* 
 * NASA AOLUSS Operator interface
 *
 * this OAS document describes the operator interface for the AOLUSS.
 *
 * OpenAPI spec version: 2.1.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AolussClientLib.Client.SwaggerDateConverter;

namespace AolussClientLib.Model
{
    /// <summary>
    /// ModelMetadata
    /// </summary>
    [DataContract]
        public partial class ModelMetadata :  IEquatable<ModelMetadata>, IValidatableObject
    {
        /// <summary>
        /// Defines TestType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TestTypeEnum
        {
            /// <summary>
            /// Enum GROUND for value: GROUND
            /// </summary>
            [EnumMember(Value = "GROUND")]
            GROUND = 1,
            /// <summary>
            /// Enum FLIGHT for value: FLIGHT
            /// </summary>
            [EnumMember(Value = "FLIGHT")]
            FLIGHT = 2        }
        /// <summary>
        /// Gets or Sets TestType
        /// </summary>
        [DataMember(Name="test_type", EmitDefaultValue=false)]
        public TestTypeEnum TestType { get; set; }
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SourceEnum
        {
            /// <summary>
            /// Enum HWITL for value: HWITL
            /// </summary>
            [EnumMember(Value = "HWITL")]
            HWITL = 1,
            /// <summary>
            /// Enum SWITL for value: SWITL
            /// </summary>
            [EnumMember(Value = "SWITL")]
            SWITL = 2        }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum Source { get; set; }
        /// <summary>
        /// Defines Setting
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SettingEnum
        {
            /// <summary>
            /// Enum LAB for value: LAB
            /// </summary>
            [EnumMember(Value = "LAB")]
            LAB = 1,
            /// <summary>
            /// Enum FIELD for value: FIELD
            /// </summary>
            [EnumMember(Value = "FIELD")]
            FIELD = 2        }
        /// <summary>
        /// Gets or Sets Setting
        /// </summary>
        [DataMember(Name="setting", EmitDefaultValue=false)]
        public SettingEnum Setting { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelMetadata" /> class.
        /// </summary>
        /// <param name="dataCollection">dataCollection (required).</param>
        /// <param name="scenario">scenario (required).</param>
        /// <param name="testCard">testCard (required).</param>
        /// <param name="callSign">callSign (required).</param>
        /// <param name="testType">testType (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="eventId">eventId (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="setting">setting (required).</param>
        /// <param name="freeText">freeText.</param>
        public ModelMetadata(bool? dataCollection = default(bool?), string scenario = default(string), string testCard = default(string), string callSign = default(string), TestTypeEnum testType = default(TestTypeEnum), SourceEnum source = default(SourceEnum), string eventId = default(string), string location = default(string), SettingEnum setting = default(SettingEnum), string freeText = default(string))
        {
            // to ensure "dataCollection" is required (not null)
            if (dataCollection == null)
            {
                throw new InvalidDataException("dataCollection is a required property for ModelMetadata and cannot be null");
            }
            else
            {
                this.DataCollection = dataCollection;
            }
            // to ensure "scenario" is required (not null)
            if (scenario == null)
            {
                throw new InvalidDataException("scenario is a required property for ModelMetadata and cannot be null");
            }
            else
            {
                this.Scenario = scenario;
            }
            // to ensure "testCard" is required (not null)
            if (testCard == null)
            {
                throw new InvalidDataException("testCard is a required property for ModelMetadata and cannot be null");
            }
            else
            {
                this.TestCard = testCard;
            }
            // to ensure "callSign" is required (not null)
            if (callSign == null)
            {
                throw new InvalidDataException("callSign is a required property for ModelMetadata and cannot be null");
            }
            else
            {
                this.CallSign = callSign;
            }
            // to ensure "testType" is required (not null)
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            if (testType == null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            {
                throw new InvalidDataException("testType is a required property for ModelMetadata and cannot be null");
            }
            else
            {
                this.TestType = testType;
            }
            // to ensure "source" is required (not null)
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            if (source == null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            {
                throw new InvalidDataException("source is a required property for ModelMetadata and cannot be null");
            }
            else
            {
                this.Source = source;
            }
            // to ensure "eventId" is required (not null)
            if (eventId == null)
            {
                throw new InvalidDataException("eventId is a required property for ModelMetadata and cannot be null");
            }
            else
            {
                this.EventId = eventId;
            }
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new InvalidDataException("location is a required property for ModelMetadata and cannot be null");
            }
            else
            {
                this.Location = location;
            }
            // to ensure "setting" is required (not null)
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            if (setting == null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            {
                throw new InvalidDataException("setting is a required property for ModelMetadata and cannot be null");
            }
            else
            {
                this.Setting = setting;
            }
            this.FreeText = freeText;
        }
        
        /// <summary>
        /// Gets or Sets DataCollection
        /// </summary>
        [DataMember(Name="data_collection", EmitDefaultValue=false)]
        public bool? DataCollection { get; set; }

        /// <summary>
        /// Gets or Sets Scenario
        /// </summary>
        [DataMember(Name="scenario", EmitDefaultValue=false)]
        public string Scenario { get; set; }

        /// <summary>
        /// Gets or Sets TestCard
        /// </summary>
        [DataMember(Name="test_card", EmitDefaultValue=false)]
        public string TestCard { get; set; }

        /// <summary>
        /// Gets or Sets CallSign
        /// </summary>
        [DataMember(Name="call_sign", EmitDefaultValue=false)]
        public string CallSign { get; set; }



        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [DataMember(Name="event_id", EmitDefaultValue=false)]
        public string EventId { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }


        /// <summary>
        /// Gets or Sets FreeText
        /// </summary>
        [DataMember(Name="free_text", EmitDefaultValue=false)]
        public string FreeText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelMetadata {\n");
            sb.Append("  DataCollection: ").Append(DataCollection).Append("\n");
            sb.Append("  Scenario: ").Append(Scenario).Append("\n");
            sb.Append("  TestCard: ").Append(TestCard).Append("\n");
            sb.Append("  CallSign: ").Append(CallSign).Append("\n");
            sb.Append("  TestType: ").Append(TestType).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Setting: ").Append(Setting).Append("\n");
            sb.Append("  FreeText: ").Append(FreeText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelMetadata);
        }

        /// <summary>
        /// Returns true if ModelMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataCollection == input.DataCollection ||
                    (this.DataCollection != null &&
                    this.DataCollection.Equals(input.DataCollection))
                ) && 
                (
                    this.Scenario == input.Scenario ||
                    (this.Scenario != null &&
                    this.Scenario.Equals(input.Scenario))
                ) && 
                (
                    this.TestCard == input.TestCard ||
                    (this.TestCard != null &&
                    this.TestCard.Equals(input.TestCard))
                ) && 
                (
                    this.CallSign == input.CallSign ||
                    (this.CallSign != null &&
                    this.CallSign.Equals(input.CallSign))
                ) && 
                (
                    this.TestType == input.TestType ||
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    (this.TestType != null &&
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    this.TestType.Equals(input.TestType))
                ) && 
                (
                    this.Source == input.Source ||
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    (this.Source != null &&
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Setting == input.Setting ||
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    (this.Setting != null &&
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    this.Setting.Equals(input.Setting))
                ) && 
                (
                    this.FreeText == input.FreeText ||
                    (this.FreeText != null &&
                    this.FreeText.Equals(input.FreeText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataCollection != null)
                    hashCode = hashCode * 59 + this.DataCollection.GetHashCode();
                if (this.Scenario != null)
                    hashCode = hashCode * 59 + this.Scenario.GetHashCode();
                if (this.TestCard != null)
                    hashCode = hashCode * 59 + this.TestCard.GetHashCode();
                if (this.CallSign != null)
                    hashCode = hashCode * 59 + this.CallSign.GetHashCode();
                if (this.TestType != null)
                    hashCode = hashCode * 59 + this.TestType.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.EventId != null)
                    hashCode = hashCode * 59 + this.EventId.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Setting != null)
                    hashCode = hashCode * 59 + this.Setting.GetHashCode();
                if (this.FreeText != null)
                    hashCode = hashCode * 59 + this.FreeText.GetHashCode();
                return hashCode;
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
