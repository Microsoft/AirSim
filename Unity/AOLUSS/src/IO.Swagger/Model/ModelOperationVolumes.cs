//*****************************************************************************
//* Project: Firefly (Microsoft Hackaton 2020)
//* Description: AOLUSS REST Client
//* Author: Mark West (mark.west@microsoft.com)
//*****************************************************************************

/* 
 * NASA AOLUSS Operator interface
 *
 * this OAS document describes the operator interface for the AOLUSS.
 *
 * OpenAPI spec version: 2.1.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AolussClientLib.Client.SwaggerDateConverter;

namespace AolussClientLib.Model
{
    /// <summary>
    /// ModelOperationVolumes
    /// </summary>
    [DataContract]
        public partial class ModelOperationVolumes :  IEquatable<ModelOperationVolumes>, IValidatableObject
    {
        /// <summary>
        /// Defines VolumeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum VolumeTypeEnum
        {
            /// <summary>
            /// Enum TBOV for value: TBOV
            /// </summary>
            [EnumMember(Value = "TBOV")]
            TBOV = 1,
            /// <summary>
            /// Enum ABOV for value: ABOV
            /// </summary>
            [EnumMember(Value = "ABOV")]
            ABOV = 2        }
        /// <summary>
        /// Gets or Sets VolumeType
        /// </summary>
        [DataMember(Name="volume_type", EmitDefaultValue=false)]
        public VolumeTypeEnum VolumeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperationVolumes" /> class.
        /// </summary>
        /// <param name="ordinal">ordinal (required).</param>
        /// <param name="effectiveTimeBegin">effectiveTimeBegin (required).</param>
        /// <param name="effectiveTimeEnd">effectiveTimeEnd (required).</param>
        /// <param name="actualTimeEnd">actualTimeEnd.</param>
        /// <param name="minAltitude">minAltitude (required).</param>
        /// <param name="maxAltitude">maxAltitude (required).</param>
        /// <param name="beyondVisualLineOfSight">beyondVisualLineOfSight (required).</param>
        /// <param name="operationGeography">operationGeography (required).</param>
        /// <param name="nearStructure">nearStructure.</param>
        /// <param name="volumeType">volumeType (required).</param>
        public ModelOperationVolumes(int? ordinal = default(int?), DateTime? effectiveTimeBegin = default(DateTime?), DateTime? effectiveTimeEnd = default(DateTime?), DateTime? actualTimeEnd = default(DateTime?), ModelAltitudeFixm minAltitude = default(ModelAltitudeFixm), ModelAltitudeFixm maxAltitude = default(ModelAltitudeFixm), bool? beyondVisualLineOfSight = default(bool?), GeojsonPolygon2D operationGeography = default(GeojsonPolygon2D), bool? nearStructure = default(bool?), VolumeTypeEnum volumeType = default(VolumeTypeEnum))
        {
            // to ensure "ordinal" is required (not null)
            if (ordinal == null)
            {
                throw new InvalidDataException("ordinal is a required property for ModelOperationVolumes and cannot be null");
            }
            else
            {
                this.Ordinal = ordinal;
            }
            // to ensure "effectiveTimeBegin" is required (not null)
            if (effectiveTimeBegin == null)
            {
                throw new InvalidDataException("effectiveTimeBegin is a required property for ModelOperationVolumes and cannot be null");
            }
            else
            {
                this.EffectiveTimeBegin = effectiveTimeBegin;
            }
            // to ensure "effectiveTimeEnd" is required (not null)
            if (effectiveTimeEnd == null)
            {
                throw new InvalidDataException("effectiveTimeEnd is a required property for ModelOperationVolumes and cannot be null");
            }
            else
            {
                this.EffectiveTimeEnd = effectiveTimeEnd;
            }
            // to ensure "minAltitude" is required (not null)
            if (minAltitude == null)
            {
                throw new InvalidDataException("minAltitude is a required property for ModelOperationVolumes and cannot be null");
            }
            else
            {
                this.MinAltitude = minAltitude;
            }
            // to ensure "maxAltitude" is required (not null)
            if (maxAltitude == null)
            {
                throw new InvalidDataException("maxAltitude is a required property for ModelOperationVolumes and cannot be null");
            }
            else
            {
                this.MaxAltitude = maxAltitude;
            }
            // to ensure "beyondVisualLineOfSight" is required (not null)
            if (beyondVisualLineOfSight == null)
            {
                throw new InvalidDataException("beyondVisualLineOfSight is a required property for ModelOperationVolumes and cannot be null");
            }
            else
            {
                this.BeyondVisualLineOfSight = beyondVisualLineOfSight;
            }
            // to ensure "operationGeography" is required (not null)
            if (operationGeography == null)
            {
                throw new InvalidDataException("operationGeography is a required property for ModelOperationVolumes and cannot be null");
            }
            else
            {
                this.OperationGeography = operationGeography;
            }
            // to ensure "volumeType" is required (not null)
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            if (volumeType == null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            {
                throw new InvalidDataException("volumeType is a required property for ModelOperationVolumes and cannot be null");
            }
            else
            {
                this.VolumeType = volumeType;
            }
            this.ActualTimeEnd = actualTimeEnd;
            this.NearStructure = nearStructure;
        }
        
        /// <summary>
        /// Gets or Sets Ordinal
        /// </summary>
        [DataMember(Name="ordinal", EmitDefaultValue=false)]
        public int? Ordinal { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveTimeBegin
        /// </summary>
        [DataMember(Name="effective_time_begin", EmitDefaultValue=false)]
        public DateTime? EffectiveTimeBegin { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveTimeEnd
        /// </summary>
        [DataMember(Name="effective_time_end", EmitDefaultValue=false)]
        public DateTime? EffectiveTimeEnd { get; set; }

        /// <summary>
        /// Gets or Sets ActualTimeEnd
        /// </summary>
        [DataMember(Name="actual_time_end", EmitDefaultValue=false)]
        public DateTime? ActualTimeEnd { get; set; }

        /// <summary>
        /// Gets or Sets MinAltitude
        /// </summary>
        [DataMember(Name="min_altitude", EmitDefaultValue=false)]
        public ModelAltitudeFixm MinAltitude { get; set; }

        /// <summary>
        /// Gets or Sets MaxAltitude
        /// </summary>
        [DataMember(Name="max_altitude", EmitDefaultValue=false)]
        public ModelAltitudeFixm MaxAltitude { get; set; }

        /// <summary>
        /// Gets or Sets BeyondVisualLineOfSight
        /// </summary>
        [DataMember(Name="beyond_visual_line_of_sight", EmitDefaultValue=false)]
        public bool? BeyondVisualLineOfSight { get; set; }

        /// <summary>
        /// Gets or Sets OperationGeography
        /// </summary>
        [DataMember(Name="operation_geography", EmitDefaultValue=false)]
        public GeojsonPolygon2D OperationGeography { get; set; }

        /// <summary>
        /// Gets or Sets NearStructure
        /// </summary>
        [DataMember(Name="near_structure", EmitDefaultValue=false)]
        public bool? NearStructure { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelOperationVolumes {\n");
            sb.Append("  Ordinal: ").Append(Ordinal).Append("\n");
            sb.Append("  EffectiveTimeBegin: ").Append(EffectiveTimeBegin).Append("\n");
            sb.Append("  EffectiveTimeEnd: ").Append(EffectiveTimeEnd).Append("\n");
            sb.Append("  ActualTimeEnd: ").Append(ActualTimeEnd).Append("\n");
            sb.Append("  MinAltitude: ").Append(MinAltitude).Append("\n");
            sb.Append("  MaxAltitude: ").Append(MaxAltitude).Append("\n");
            sb.Append("  BeyondVisualLineOfSight: ").Append(BeyondVisualLineOfSight).Append("\n");
            sb.Append("  OperationGeography: ").Append(OperationGeography).Append("\n");
            sb.Append("  NearStructure: ").Append(NearStructure).Append("\n");
            sb.Append("  VolumeType: ").Append(VolumeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelOperationVolumes);
        }

        /// <summary>
        /// Returns true if ModelOperationVolumes instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelOperationVolumes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelOperationVolumes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ordinal == input.Ordinal ||
                    (this.Ordinal != null &&
                    this.Ordinal.Equals(input.Ordinal))
                ) && 
                (
                    this.EffectiveTimeBegin == input.EffectiveTimeBegin ||
                    (this.EffectiveTimeBegin != null &&
                    this.EffectiveTimeBegin.Equals(input.EffectiveTimeBegin))
                ) && 
                (
                    this.EffectiveTimeEnd == input.EffectiveTimeEnd ||
                    (this.EffectiveTimeEnd != null &&
                    this.EffectiveTimeEnd.Equals(input.EffectiveTimeEnd))
                ) && 
                (
                    this.ActualTimeEnd == input.ActualTimeEnd ||
                    (this.ActualTimeEnd != null &&
                    this.ActualTimeEnd.Equals(input.ActualTimeEnd))
                ) && 
                (
                    this.MinAltitude == input.MinAltitude ||
                    (this.MinAltitude != null &&
                    this.MinAltitude.Equals(input.MinAltitude))
                ) && 
                (
                    this.MaxAltitude == input.MaxAltitude ||
                    (this.MaxAltitude != null &&
                    this.MaxAltitude.Equals(input.MaxAltitude))
                ) && 
                (
                    this.BeyondVisualLineOfSight == input.BeyondVisualLineOfSight ||
                    (this.BeyondVisualLineOfSight != null &&
                    this.BeyondVisualLineOfSight.Equals(input.BeyondVisualLineOfSight))
                ) && 
                (
                    this.OperationGeography == input.OperationGeography ||
                    (this.OperationGeography != null &&
                    this.OperationGeography.Equals(input.OperationGeography))
                ) && 
                (
                    this.NearStructure == input.NearStructure ||
                    (this.NearStructure != null &&
                    this.NearStructure.Equals(input.NearStructure))
                ) && 
                (
                    this.VolumeType == input.VolumeType ||
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    (this.VolumeType != null &&
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    this.VolumeType.Equals(input.VolumeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ordinal != null)
                    hashCode = hashCode * 59 + this.Ordinal.GetHashCode();
                if (this.EffectiveTimeBegin != null)
                    hashCode = hashCode * 59 + this.EffectiveTimeBegin.GetHashCode();
                if (this.EffectiveTimeEnd != null)
                    hashCode = hashCode * 59 + this.EffectiveTimeEnd.GetHashCode();
                if (this.ActualTimeEnd != null)
                    hashCode = hashCode * 59 + this.ActualTimeEnd.GetHashCode();
                if (this.MinAltitude != null)
                    hashCode = hashCode * 59 + this.MinAltitude.GetHashCode();
                if (this.MaxAltitude != null)
                    hashCode = hashCode * 59 + this.MaxAltitude.GetHashCode();
                if (this.BeyondVisualLineOfSight != null)
                    hashCode = hashCode * 59 + this.BeyondVisualLineOfSight.GetHashCode();
                if (this.OperationGeography != null)
                    hashCode = hashCode * 59 + this.OperationGeography.GetHashCode();
                if (this.NearStructure != null)
                    hashCode = hashCode * 59 + this.NearStructure.GetHashCode();
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                if (this.VolumeType != null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    hashCode = hashCode * 59 + this.VolumeType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
