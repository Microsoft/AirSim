//*****************************************************************************
//* Project: Firefly (Microsoft Hackaton 2020)
//* Description: AOLUSS REST Client
//* Author: Mark West (mark.west@microsoft.com)
//*****************************************************************************

/* 
 * NASA AOLUSS Operator interface
 *
 * this OAS document describes the operator interface for the AOLUSS.
 *
 * OpenAPI spec version: 2.1.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AolussClientLib.Client.SwaggerDateConverter;

namespace AolussClientLib.Model
{
    /// <summary>
    /// ModelOperatorOperation
    /// </summary>
    [DataContract]
        public partial class ModelOperatorOperation :  IEquatable<ModelOperatorOperation>, IValidatableObject
    {
        /// <summary>
        /// Defines FaaRule
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FaaRuleEnum
        {
            /// <summary>
            /// Enum PART101E for value: PART_101E
            /// </summary>
            [EnumMember(Value = "PART_101E")]
            PART101E = 1,
            /// <summary>
            /// Enum PART107 for value: PART_107
            /// </summary>
            [EnumMember(Value = "PART_107")]
            PART107 = 2,
            /// <summary>
            /// Enum PART107X for value: PART_107X
            /// </summary>
            [EnumMember(Value = "PART_107X")]
            PART107X = 3,
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 4        }
        /// <summary>
        /// Gets or Sets FaaRule
        /// </summary>
        [DataMember(Name="faa_rule", EmitDefaultValue=false)]
        public FaaRuleEnum FaaRule { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperatorOperation" /> class.
        /// </summary>
        /// <param name="gufi">gufi (required).</param>
        /// <param name="uasRegistrations">uasRegistrations (required).</param>
        /// <param name="contact">contact (required).</param>
        /// <param name="controllerLocation">controllerLocation (required).</param>
        /// <param name="gcsLocation">gcsLocation.</param>
        /// <param name="faaRule">faaRule (required).</param>
        /// <param name="operationVolumes">operationVolumes (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="aircraftComments">aircraftComments.</param>
        /// <param name="flightComments">flightComments.</param>
        /// <param name="volumesDescription">volumesDescription.</param>
        /// <param name="airspaceAuthorization">airspaceAuthorization.</param>
        /// <param name="flightNumber">flightNumber.</param>
        /// <param name="contingencyPlans">contingencyPlans (required).</param>
        /// <param name="priorityElements">priorityElements.</param>
        public ModelOperatorOperation(Guid? gufi = default(Guid?), List<ModelUasRegistrations> uasRegistrations = default(List<ModelUasRegistrations>), ModelContact contact = default(ModelContact), GeojsonPoint2D controllerLocation = default(GeojsonPoint2D), GeojsonPoint2D gcsLocation = default(GeojsonPoint2D), FaaRuleEnum faaRule = default(FaaRuleEnum), List<ModelOperationVolumes> operationVolumes = default(List<ModelOperationVolumes>), ModelMetadata metadata = default(ModelMetadata), string aircraftComments = default(string), string flightComments = default(string), string volumesDescription = default(string), Guid? airspaceAuthorization = default(Guid?), string flightNumber = default(string), List<ModelContingencyPlans> contingencyPlans = default(List<ModelContingencyPlans>), ModelPriorityElements priorityElements = default(ModelPriorityElements))
        {
            // to ensure "gufi" is required (not null)
            if (gufi == null)
            {
                throw new InvalidDataException("gufi is a required property for ModelOperatorOperation and cannot be null");
            }
            else
            {
                this.Gufi = gufi;
            }
            // to ensure "uasRegistrations" is required (not null)
            if (uasRegistrations == null)
            {
                throw new InvalidDataException("uasRegistrations is a required property for ModelOperatorOperation and cannot be null");
            }
            else
            {
                this.UasRegistrations = uasRegistrations;
            }
            // to ensure "contact" is required (not null)
            if (contact == null)
            {
                throw new InvalidDataException("contact is a required property for ModelOperatorOperation and cannot be null");
            }
            else
            {
                this.Contact = contact;
            }
            // to ensure "controllerLocation" is required (not null)
            if (controllerLocation == null)
            {
                throw new InvalidDataException("controllerLocation is a required property for ModelOperatorOperation and cannot be null");
            }
            else
            {
                this.ControllerLocation = controllerLocation;
            }
            // to ensure "faaRule" is required (not null)
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            if (faaRule == null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            {
                throw new InvalidDataException("faaRule is a required property for ModelOperatorOperation and cannot be null");
            }
            else
            {
                this.FaaRule = faaRule;
            }
            // to ensure "operationVolumes" is required (not null)
            if (operationVolumes == null)
            {
                throw new InvalidDataException("operationVolumes is a required property for ModelOperatorOperation and cannot be null");
            }
            else
            {
                this.OperationVolumes = operationVolumes;
            }
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new InvalidDataException("metadata is a required property for ModelOperatorOperation and cannot be null");
            }
            else
            {
                this.Metadata = metadata;
            }
            // to ensure "contingencyPlans" is required (not null)
            if (contingencyPlans == null)
            {
                throw new InvalidDataException("contingencyPlans is a required property for ModelOperatorOperation and cannot be null");
            }
            else
            {
                this.ContingencyPlans = contingencyPlans;
            }
            this.GcsLocation = gcsLocation;
            this.AircraftComments = aircraftComments;
            this.FlightComments = flightComments;
            this.VolumesDescription = volumesDescription;
            this.AirspaceAuthorization = airspaceAuthorization;
            this.FlightNumber = flightNumber;
            this.PriorityElements = priorityElements;
        }
        
        /// <summary>
        /// Gets or Sets Gufi
        /// </summary>
        [DataMember(Name="gufi", EmitDefaultValue=false)]
        public Guid? Gufi { get; set; }

        /// <summary>
        /// Gets or Sets UasRegistrations
        /// </summary>
        [DataMember(Name="uas_registrations", EmitDefaultValue=false)]
        public List<ModelUasRegistrations> UasRegistrations { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public ModelContact Contact { get; set; }

        /// <summary>
        /// Gets or Sets ControllerLocation
        /// </summary>
        [DataMember(Name="controller_location", EmitDefaultValue=false)]
        public GeojsonPoint2D ControllerLocation { get; set; }

        /// <summary>
        /// Gets or Sets GcsLocation
        /// </summary>
        [DataMember(Name="gcs_location", EmitDefaultValue=false)]
        public GeojsonPoint2D GcsLocation { get; set; }


        /// <summary>
        /// Gets or Sets OperationVolumes
        /// </summary>
        [DataMember(Name="operation_volumes", EmitDefaultValue=false)]
        public List<ModelOperationVolumes> OperationVolumes { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public ModelMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets AircraftComments
        /// </summary>
        [DataMember(Name="aircraft_comments", EmitDefaultValue=false)]
        public string AircraftComments { get; set; }

        /// <summary>
        /// Gets or Sets FlightComments
        /// </summary>
        [DataMember(Name="flight_comments", EmitDefaultValue=false)]
        public string FlightComments { get; set; }

        /// <summary>
        /// Gets or Sets VolumesDescription
        /// </summary>
        [DataMember(Name="volumes_description", EmitDefaultValue=false)]
        public string VolumesDescription { get; set; }

        /// <summary>
        /// Gets or Sets AirspaceAuthorization
        /// </summary>
        [DataMember(Name="airspace_authorization", EmitDefaultValue=false)]
        public Guid? AirspaceAuthorization { get; set; }

        /// <summary>
        /// Gets or Sets FlightNumber
        /// </summary>
        [DataMember(Name="flight_number", EmitDefaultValue=false)]
        public string FlightNumber { get; set; }

        /// <summary>
        /// Gets or Sets ContingencyPlans
        /// </summary>
        [DataMember(Name="contingency_plans", EmitDefaultValue=false)]
        public List<ModelContingencyPlans> ContingencyPlans { get; set; }

        /// <summary>
        /// Gets or Sets PriorityElements
        /// </summary>
        [DataMember(Name="priority_elements", EmitDefaultValue=false)]
        public ModelPriorityElements PriorityElements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelOperatorOperation {\n");
            sb.Append("  Gufi: ").Append(Gufi).Append("\n");
            sb.Append("  UasRegistrations: ").Append(UasRegistrations).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  ControllerLocation: ").Append(ControllerLocation).Append("\n");
            sb.Append("  GcsLocation: ").Append(GcsLocation).Append("\n");
            sb.Append("  FaaRule: ").Append(FaaRule).Append("\n");
            sb.Append("  OperationVolumes: ").Append(OperationVolumes).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  AircraftComments: ").Append(AircraftComments).Append("\n");
            sb.Append("  FlightComments: ").Append(FlightComments).Append("\n");
            sb.Append("  VolumesDescription: ").Append(VolumesDescription).Append("\n");
            sb.Append("  AirspaceAuthorization: ").Append(AirspaceAuthorization).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  ContingencyPlans: ").Append(ContingencyPlans).Append("\n");
            sb.Append("  PriorityElements: ").Append(PriorityElements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelOperatorOperation);
        }

        /// <summary>
        /// Returns true if ModelOperatorOperation instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelOperatorOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelOperatorOperation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gufi == input.Gufi ||
                    (this.Gufi != null &&
                    this.Gufi.Equals(input.Gufi))
                ) && 
                (
                    this.UasRegistrations == input.UasRegistrations ||
                    this.UasRegistrations != null &&
                    input.UasRegistrations != null &&
                    this.UasRegistrations.SequenceEqual(input.UasRegistrations)
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.ControllerLocation == input.ControllerLocation ||
                    (this.ControllerLocation != null &&
                    this.ControllerLocation.Equals(input.ControllerLocation))
                ) && 
                (
                    this.GcsLocation == input.GcsLocation ||
                    (this.GcsLocation != null &&
                    this.GcsLocation.Equals(input.GcsLocation))
                ) && 
                (
                    this.FaaRule == input.FaaRule ||
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    (this.FaaRule != null &&
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    this.FaaRule.Equals(input.FaaRule))
                ) && 
                (
                    this.OperationVolumes == input.OperationVolumes ||
                    this.OperationVolumes != null &&
                    input.OperationVolumes != null &&
                    this.OperationVolumes.SequenceEqual(input.OperationVolumes)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.AircraftComments == input.AircraftComments ||
                    (this.AircraftComments != null &&
                    this.AircraftComments.Equals(input.AircraftComments))
                ) && 
                (
                    this.FlightComments == input.FlightComments ||
                    (this.FlightComments != null &&
                    this.FlightComments.Equals(input.FlightComments))
                ) && 
                (
                    this.VolumesDescription == input.VolumesDescription ||
                    (this.VolumesDescription != null &&
                    this.VolumesDescription.Equals(input.VolumesDescription))
                ) && 
                (
                    this.AirspaceAuthorization == input.AirspaceAuthorization ||
                    (this.AirspaceAuthorization != null &&
                    this.AirspaceAuthorization.Equals(input.AirspaceAuthorization))
                ) && 
                (
                    this.FlightNumber == input.FlightNumber ||
                    (this.FlightNumber != null &&
                    this.FlightNumber.Equals(input.FlightNumber))
                ) && 
                (
                    this.ContingencyPlans == input.ContingencyPlans ||
                    this.ContingencyPlans != null &&
                    input.ContingencyPlans != null &&
                    this.ContingencyPlans.SequenceEqual(input.ContingencyPlans)
                ) && 
                (
                    this.PriorityElements == input.PriorityElements ||
                    (this.PriorityElements != null &&
                    this.PriorityElements.Equals(input.PriorityElements))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gufi != null)
                    hashCode = hashCode * 59 + this.Gufi.GetHashCode();
                if (this.UasRegistrations != null)
                    hashCode = hashCode * 59 + this.UasRegistrations.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.ControllerLocation != null)
                    hashCode = hashCode * 59 + this.ControllerLocation.GetHashCode();
                if (this.GcsLocation != null)
                    hashCode = hashCode * 59 + this.GcsLocation.GetHashCode();
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                if (this.FaaRule != null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    hashCode = hashCode * 59 + this.FaaRule.GetHashCode();
                if (this.OperationVolumes != null)
                    hashCode = hashCode * 59 + this.OperationVolumes.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.AircraftComments != null)
                    hashCode = hashCode * 59 + this.AircraftComments.GetHashCode();
                if (this.FlightComments != null)
                    hashCode = hashCode * 59 + this.FlightComments.GetHashCode();
                if (this.VolumesDescription != null)
                    hashCode = hashCode * 59 + this.VolumesDescription.GetHashCode();
                if (this.AirspaceAuthorization != null)
                    hashCode = hashCode * 59 + this.AirspaceAuthorization.GetHashCode();
                if (this.FlightNumber != null)
                    hashCode = hashCode * 59 + this.FlightNumber.GetHashCode();
                if (this.ContingencyPlans != null)
                    hashCode = hashCode * 59 + this.ContingencyPlans.GetHashCode();
                if (this.PriorityElements != null)
                    hashCode = hashCode * 59 + this.PriorityElements.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
