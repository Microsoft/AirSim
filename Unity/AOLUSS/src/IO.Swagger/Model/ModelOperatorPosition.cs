//*****************************************************************************
//* Project: Firefly (Microsoft Hackaton 2020)
//* Description: AOLUSS REST Client
//* Author: Mark West (mark.west@microsoft.com)
//*****************************************************************************

/* 
 * NASA AOLUSS Operator interface
 *
 * this OAS document describes the operator interface for the AOLUSS.
 *
 * OpenAPI spec version: 2.1.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AolussClientLib.Client.SwaggerDateConverter;

namespace AolussClientLib.Model
{
    /// <summary>
    /// ModelOperatorPosition
    /// </summary>
    [DataContract]
        public partial class ModelOperatorPosition :  IEquatable<ModelOperatorPosition>, IValidatableObject
    {
        /// <summary>
        /// Defines TrackBearingReference
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TrackBearingReferenceEnum
        {
            /// <summary>
            /// Enum TRUENORTH for value: TRUE_NORTH
            /// </summary>
            [EnumMember(Value = "TRUE_NORTH")]
            TRUENORTH = 1,
            /// <summary>
            /// Enum MAGNETICNORTH for value: MAGNETIC_NORTH
            /// </summary>
            [EnumMember(Value = "MAGNETIC_NORTH")]
            MAGNETICNORTH = 2        }
        /// <summary>
        /// Gets or Sets TrackBearingReference
        /// </summary>
        [DataMember(Name="track_bearing_reference", EmitDefaultValue=false)]
        public TrackBearingReferenceEnum TrackBearingReference { get; set; }
        /// <summary>
        /// Defines TrackBearingUom
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TrackBearingUomEnum
        {
            /// <summary>
            /// Enum DEG for value: DEG
            /// </summary>
            [EnumMember(Value = "DEG")]
            DEG = 1        }
        /// <summary>
        /// Gets or Sets TrackBearingUom
        /// </summary>
        [DataMember(Name="track_bearing_uom", EmitDefaultValue=false)]
        public TrackBearingUomEnum TrackBearingUom { get; set; }
        /// <summary>
        /// Defines TrackGroundSpeedUnits
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TrackGroundSpeedUnitsEnum
        {
            /// <summary>
            /// Enum KT for value: KT
            /// </summary>
            [EnumMember(Value = "KT")]
            KT = 1        }
        /// <summary>
        /// Gets or Sets TrackGroundSpeedUnits
        /// </summary>
        [DataMember(Name="track_ground_speed_units", EmitDefaultValue=false)]
        public TrackGroundSpeedUnitsEnum TrackGroundSpeedUnits { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperatorPosition" /> class.
        /// </summary>
        /// <param name="altitudeGps">altitudeGps (required).</param>
        /// <param name="enroutePositionsId">enroutePositionsId (required).</param>
        /// <param name="gufi">gufi (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="timeMeasured">timeMeasured (required).</param>
        /// <param name="vdopGps">vdopGps (required).</param>
        /// <param name="hdopGps">hdopGps (required).</param>
        /// <param name="altitudeNumGpsSatellites">altitudeNumGpsSatellites (required).</param>
        /// <param name="trackBearingReference">trackBearingReference (required).</param>
        /// <param name="trackBearing">trackBearing (required).</param>
        /// <param name="trackBearingUom">trackBearingUom (required).</param>
        /// <param name="trackGroundSpeed">trackGroundSpeed (required).</param>
        /// <param name="trackGroundSpeedUnits">trackGroundSpeedUnits (required).</param>
        /// <param name="comments">comments.</param>
        public ModelOperatorPosition(ModelAltitudeFixm altitudeGps = default(ModelAltitudeFixm), Guid? enroutePositionsId = default(Guid?), Guid? gufi = default(Guid?), GeojsonPoint2D location = default(GeojsonPoint2D), DateTime? timeMeasured = default(DateTime?), decimal? vdopGps = default(decimal?), decimal? hdopGps = default(decimal?), int? altitudeNumGpsSatellites = default(int?), TrackBearingReferenceEnum trackBearingReference = default(TrackBearingReferenceEnum), decimal? trackBearing = default(decimal?), TrackBearingUomEnum trackBearingUom = default(TrackBearingUomEnum), decimal? trackGroundSpeed = default(decimal?), TrackGroundSpeedUnitsEnum trackGroundSpeedUnits = default(TrackGroundSpeedUnitsEnum), string comments = default(string))
        {
            // to ensure "altitudeGps" is required (not null)
            if (altitudeGps == null)
            {
                throw new InvalidDataException("altitudeGps is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.AltitudeGps = altitudeGps;
            }
            // to ensure "enroutePositionsId" is required (not null)
            if (enroutePositionsId == null)
            {
                throw new InvalidDataException("enroutePositionsId is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.EnroutePositionsId = enroutePositionsId;
            }
            // to ensure "gufi" is required (not null)
            if (gufi == null)
            {
                throw new InvalidDataException("gufi is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.Gufi = gufi;
            }
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new InvalidDataException("location is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.Location = location;
            }
            // to ensure "timeMeasured" is required (not null)
            if (timeMeasured == null)
            {
                throw new InvalidDataException("timeMeasured is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.TimeMeasured = timeMeasured;
            }
            // to ensure "vdopGps" is required (not null)
            if (vdopGps == null)
            {
                throw new InvalidDataException("vdopGps is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.VdopGps = vdopGps;
            }
            // to ensure "hdopGps" is required (not null)
            if (hdopGps == null)
            {
                throw new InvalidDataException("hdopGps is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.HdopGps = hdopGps;
            }
            // to ensure "altitudeNumGpsSatellites" is required (not null)
            if (altitudeNumGpsSatellites == null)
            {
                throw new InvalidDataException("altitudeNumGpsSatellites is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.AltitudeNumGpsSatellites = altitudeNumGpsSatellites;
            }
            // to ensure "trackBearingReference" is required (not null)
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            if (trackBearingReference == null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            {
                throw new InvalidDataException("trackBearingReference is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.TrackBearingReference = trackBearingReference;
            }
            // to ensure "trackBearing" is required (not null)
            if (trackBearing == null)
            {
                throw new InvalidDataException("trackBearing is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.TrackBearing = trackBearing;
            }
            // to ensure "trackBearingUom" is required (not null)
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            if (trackBearingUom == null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            {
                throw new InvalidDataException("trackBearingUom is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.TrackBearingUom = trackBearingUom;
            }
            // to ensure "trackGroundSpeed" is required (not null)
            if (trackGroundSpeed == null)
            {
                throw new InvalidDataException("trackGroundSpeed is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.TrackGroundSpeed = trackGroundSpeed;
            }
            // to ensure "trackGroundSpeedUnits" is required (not null)
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            if (trackGroundSpeedUnits == null)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            {
                throw new InvalidDataException("trackGroundSpeedUnits is a required property for ModelOperatorPosition and cannot be null");
            }
            else
            {
                this.TrackGroundSpeedUnits = trackGroundSpeedUnits;
            }
            this.Comments = comments;
        }
        
        /// <summary>
        /// Gets or Sets AltitudeGps
        /// </summary>
        [DataMember(Name="altitude_gps", EmitDefaultValue=false)]
        public ModelAltitudeFixm AltitudeGps { get; set; }

        /// <summary>
        /// Gets or Sets EnroutePositionsId
        /// </summary>
        [DataMember(Name="enroute_positions_id", EmitDefaultValue=false)]
        public Guid? EnroutePositionsId { get; set; }

        /// <summary>
        /// Gets or Sets Gufi
        /// </summary>
        [DataMember(Name="gufi", EmitDefaultValue=false)]
        public Guid? Gufi { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public GeojsonPoint2D Location { get; set; }

        /// <summary>
        /// Gets or Sets TimeMeasured
        /// </summary>
        [DataMember(Name="time_measured", EmitDefaultValue=false)]
        public DateTime? TimeMeasured { get; set; }

        /// <summary>
        /// Gets or Sets VdopGps
        /// </summary>
        [DataMember(Name="vdop_gps", EmitDefaultValue=false)]
        public decimal? VdopGps { get; set; }

        /// <summary>
        /// Gets or Sets HdopGps
        /// </summary>
        [DataMember(Name="hdop_gps", EmitDefaultValue=false)]
        public decimal? HdopGps { get; set; }

        /// <summary>
        /// Gets or Sets AltitudeNumGpsSatellites
        /// </summary>
        [DataMember(Name="altitude_num_gps_satellites", EmitDefaultValue=false)]
        public int? AltitudeNumGpsSatellites { get; set; }


        /// <summary>
        /// Gets or Sets TrackBearing
        /// </summary>
        [DataMember(Name="track_bearing", EmitDefaultValue=false)]
        public decimal? TrackBearing { get; set; }


        /// <summary>
        /// Gets or Sets TrackGroundSpeed
        /// </summary>
        [DataMember(Name="track_ground_speed", EmitDefaultValue=false)]
        public decimal? TrackGroundSpeed { get; set; }


        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelOperatorPosition {\n");
            sb.Append("  AltitudeGps: ").Append(AltitudeGps).Append("\n");
            sb.Append("  EnroutePositionsId: ").Append(EnroutePositionsId).Append("\n");
            sb.Append("  Gufi: ").Append(Gufi).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  TimeMeasured: ").Append(TimeMeasured).Append("\n");
            sb.Append("  VdopGps: ").Append(VdopGps).Append("\n");
            sb.Append("  HdopGps: ").Append(HdopGps).Append("\n");
            sb.Append("  AltitudeNumGpsSatellites: ").Append(AltitudeNumGpsSatellites).Append("\n");
            sb.Append("  TrackBearingReference: ").Append(TrackBearingReference).Append("\n");
            sb.Append("  TrackBearing: ").Append(TrackBearing).Append("\n");
            sb.Append("  TrackBearingUom: ").Append(TrackBearingUom).Append("\n");
            sb.Append("  TrackGroundSpeed: ").Append(TrackGroundSpeed).Append("\n");
            sb.Append("  TrackGroundSpeedUnits: ").Append(TrackGroundSpeedUnits).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelOperatorPosition);
        }

        /// <summary>
        /// Returns true if ModelOperatorPosition instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelOperatorPosition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelOperatorPosition input)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            if (input == null)
                return false;

            return 
                (
                    this.AltitudeGps == input.AltitudeGps ||
                    (this.AltitudeGps != null &&
                    this.AltitudeGps.Equals(input.AltitudeGps))
                ) && 
                (
                    this.EnroutePositionsId == input.EnroutePositionsId ||
                    (this.EnroutePositionsId != null &&
                    this.EnroutePositionsId.Equals(input.EnroutePositionsId))
                ) && 
                (
                    this.Gufi == input.Gufi ||
                    (this.Gufi != null &&
                    this.Gufi.Equals(input.Gufi))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.TimeMeasured == input.TimeMeasured ||
                    (this.TimeMeasured != null &&
                    this.TimeMeasured.Equals(input.TimeMeasured))
                ) && 
                (
                    this.VdopGps == input.VdopGps ||
                    (this.VdopGps != null &&
                    this.VdopGps.Equals(input.VdopGps))
                ) && 
                (
                    this.HdopGps == input.HdopGps ||
                    (this.HdopGps != null &&
                    this.HdopGps.Equals(input.HdopGps))
                ) && 
                (
                    this.AltitudeNumGpsSatellites == input.AltitudeNumGpsSatellites ||
                    (this.AltitudeNumGpsSatellites != null &&
                    this.AltitudeNumGpsSatellites.Equals(input.AltitudeNumGpsSatellites))
                ) && 
                (
                    this.TrackBearingReference == input.TrackBearingReference ||
                    (this.TrackBearingReference != null &&
                    this.TrackBearingReference.Equals(input.TrackBearingReference))
                ) && 
                (
                    this.TrackBearing == input.TrackBearing ||
                    (this.TrackBearing != null &&
                    this.TrackBearing.Equals(input.TrackBearing))
                ) && 
                (
                    this.TrackBearingUom == input.TrackBearingUom ||
                    (this.TrackBearingUom != null &&
                    this.TrackBearingUom.Equals(input.TrackBearingUom))
                ) && 
                (
                    this.TrackGroundSpeed == input.TrackGroundSpeed ||
                    (this.TrackGroundSpeed != null &&
                    this.TrackGroundSpeed.Equals(input.TrackGroundSpeed))
                ) && 
                (
                    this.TrackGroundSpeedUnits == input.TrackGroundSpeedUnits ||
                    (this.TrackGroundSpeedUnits != null &&
                    this.TrackGroundSpeedUnits.Equals(input.TrackGroundSpeedUnits))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                );
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AltitudeGps != null)
                    hashCode = hashCode * 59 + this.AltitudeGps.GetHashCode();
                if (this.EnroutePositionsId != null)
                    hashCode = hashCode * 59 + this.EnroutePositionsId.GetHashCode();
                if (this.Gufi != null)
                    hashCode = hashCode * 59 + this.Gufi.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.TimeMeasured != null)
                    hashCode = hashCode * 59 + this.TimeMeasured.GetHashCode();
                if (this.VdopGps != null)
                    hashCode = hashCode * 59 + this.VdopGps.GetHashCode();
                if (this.HdopGps != null)
                    hashCode = hashCode * 59 + this.HdopGps.GetHashCode();
                if (this.AltitudeNumGpsSatellites != null)
                    hashCode = hashCode * 59 + this.AltitudeNumGpsSatellites.GetHashCode();
                if (this.TrackBearingReference != null)
                    hashCode = hashCode * 59 + this.TrackBearingReference.GetHashCode();
                if (this.TrackBearing != null)
                    hashCode = hashCode * 59 + this.TrackBearing.GetHashCode();
                if (this.TrackBearingUom != null)
                    hashCode = hashCode * 59 + this.TrackBearingUom.GetHashCode();
                if (this.TrackGroundSpeed != null)
                    hashCode = hashCode * 59 + this.TrackGroundSpeed.GetHashCode();
                if (this.TrackGroundSpeedUnits != null)
                    hashCode = hashCode * 59 + this.TrackGroundSpeedUnits.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                return hashCode;
            }
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
